pipeline {
    
    agent any
    parameters {
    	booleanParam(name:'SonarQube', defaultValue: false, description: '')
    }
    
    stages {
		stage('Source') { 
			steps {
				// Checkout
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/manaswithadanda/GHJavaTestNG.git']]])
			}
		}
		
		stage('Code Analysis') { 
		
			environment {
				def scannerHome = tool 'GTSonarQubeScanner'
			}
			
			when {
				expression { return params.SonarQube }
			}
			
			steps {
				echo "SCANNER HOME: ${scannerHome}"
				withSonarQubeEnv('SonarQubeServer') {
				    bat "\"${scannerHome}\\bin\\sonar-scanner.bat\" -Dsonar.host.url=http:\"\"localhost:9000 -Dsonar.projectName=HappyTrip -Dsonar.projectVersion=${currentBuild.number} -Dsonar.projectKey=HappyTrip:app -Dsonar.sources=. -Dsonar.java.binaries=."
				}
			}
		}
    
	    	stage('Compile') { 
			tools {
				// Specify Tool Name from your global tool configuration
				jdk 'jdk8'
				maven 'MavenConfiguration'
			}
			steps {
				//powershell label: '', script: 'mvn compile -Dmaven.test.skip=true package'
				script {
					if(params.RunTests == false) {
						bat "mvn clean package -DskipTests"
					}
					else {
						bat "mvn clean package"
					}
				}
			}
		}
		
		stage('Deploy approval') {
			steps {
				script {
					//def result = input(id: 'Proceed1', message: 'Deployment Approval', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Please confirm you agree with this']])
					input id: 'Custid', message: 'Do u wanna proceed?', ok: 'OKCaption', submitter: 'projectmanager', submitterParameter: 'ShouldBeSubmitterAction'
				}
			}
		}
	}
	post {
        	always {
			echo "CURRENT BUILD STATUS BEFORE PUBLISH TESTNG: ${currentBuild.result}"
			//Publich TestNG Result
			step([$class: 'Publisher'])
			echo "CURRENT BUILD STATUS AFTER PUBLISH TESTNG: ${currentBuild.result}"
			
			//Threshold Check
			echo "CURRENT BUILD STATUS: ${currentBuild.result}"
			//step([$class: 'Publisher', failedFails: 60, unstableFails: 100])
			xunit thresholds: [failed(failureNewThreshold: '0', failureThreshold: '0', unstableNewThreshold: '100', unstableThreshold: '100')], tools: [JUnit(deleteOutputFiles: true, failIfNotNew: true, pattern: '**/junitreports/*.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            
			//Sending Email
     			//step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: 'manaswitha.danda@pratian.com', sendToIndividuals: false])
			
			//emailext body: '''$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:
//Check console output at $BUILD_URL to view the results.
//${FILE, path="target/surefire-reports/emailable-report.html"}''', subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!', to: 'manaswitha.danda@pratian.com'
			
			emailext attachLog: true, attachmentsPattern: 'target/surefire-reports/emailable-report.html', body: '${FILE, path="target/surefire-reports/emailable-report.html"}', compressLog: true, mimeType: 'text/html', subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS', to: 'manaswitha.danda@pratian.com'
			
			
			//script {
			//	if(currentBuild.result == 'UNSTABLE')
			//		currentBuild.result = 'FAILURE'
			//}
		}
    	}
}
